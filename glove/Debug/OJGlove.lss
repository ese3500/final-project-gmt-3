
OJGlove.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  0000039e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c8a  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a96  00000000  00000000  000010fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000461  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000552  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e3  00000000  00000000  0000262a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000280d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_14>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	ac 30       	cpi	r26, 0x0C	; 12
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 2c 01 	call	0x258	; 0x258 <main>
  d4:	0c 94 93 01 	jmp	0x326	; 0x326 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <__vector_14>:
volatile int beatsPerMinute = 0;

volatile uint32_t milliseconds = 0;


ISR(TIMER0_COMPA_vect) {
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
	milliseconds++;
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  fa:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	a1 1d       	adc	r26, r1
 102:	b1 1d       	adc	r27, r1
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 110:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
 114:	bf 91       	pop	r27
 116:	af 91       	pop	r26
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <uart_init>:

// UART SET UP Master End.
void uart_init(void) {
	UBRR0H = (uint8_t)(USART_BAUD_PRESCALER >> 8);
 126:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)(USART_BAUD_PRESCALER);
 12a:	87 e6       	ldi	r24, 0x67	; 103
 12c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << TXEN0); // Enable transmitter
 130:	88 e0       	ldi	r24, 0x08	; 8
 132:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // 8 data bits, no parity, 1 stop bit
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 13c:	08 95       	ret

0000013e <uart_transmit>:
}

void uart_transmit(uint8_t data) {
	while (!(UCSR0A & (1 << UDRE0))); // Wait for empty transmit buffer
 13e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 142:	95 ff       	sbrs	r25, 5
 144:	fc cf       	rjmp	.-8      	; 0x13e <uart_transmit>
	UDR0 = data; // Put data into buffer, sends the data
 146:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 14a:	08 95       	ret

0000014c <timer0_init>:
}

void timer0_init() {
	TCCR0A = (1 << WGM01); // CTC mode
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00); // Prescaler: 64
 150:	93 e0       	ldi	r25, 0x03	; 3
 152:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249; // Compare match value for 1ms interrupt
 154:	99 ef       	ldi	r25, 0xF9	; 249
 156:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1 << OCIE0A); // Enable compare match interrupt
 158:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	sei(); // Enable global interrupts
 15c:	78 94       	sei
 15e:	08 95       	ret

00000160 <millis>:
}

uint32_t millis() {
	uint32_t ms;
	cli(); // Disable interrupts
 160:	f8 94       	cli
	ms = milliseconds;
 162:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 166:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 16e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	sei(); // Enable interrupts
 172:	78 94       	sei
	return ms;
}
 174:	08 95       	ret

00000176 <adc_init>:

void adc_init() {
	ADMUX = (1 << REFS0);  // AVCC with external capacitor at AREF pin
 176:	80 e4       	ldi	r24, 0x40	; 64
 178:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN)  // Enable ADC
 17c:	87 e8       	ldi	r24, 0x87	; 135
 17e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 182:	08 95       	ret

00000184 <adc_read>:
	| (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // Prescaler at 128 so we have an 125 KHz clock source
}

uint16_t adc_read(uint8_t ch) {
	ADMUX = (ADMUX & 0xF8) | (ch & 0x07);  // select the correct channel: 0-7
 184:	ec e7       	ldi	r30, 0x7C	; 124
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	90 81       	ld	r25, Z
 18a:	98 7f       	andi	r25, 0xF8	; 248
 18c:	87 70       	andi	r24, 0x07	; 7
 18e:	89 2b       	or	r24, r25
 190:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  // start ADC conversion
 192:	ea e7       	ldi	r30, 0x7A	; 122
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	80 64       	ori	r24, 0x40	; 64
 19a:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));  // wait until conversion finishes
 19c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1a0:	86 fd       	sbrc	r24, 6
 1a2:	fc cf       	rjmp	.-8      	; 0x19c <adc_read+0x18>
	return ADC;
 1a4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1a8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 1ac:	08 95       	ret

000001ae <process_heartbeat>:

void process_heartbeat(uint16_t adc_value) {
 1ae:	cf 92       	push	r12
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	ec 01       	movw	r28, r24
	uint32_t currentTime = millis();  // Implement this function to return milliseconds
 1bc:	0e 94 b0 00 	call	0x160	; 0x160 <millis>
 1c0:	6b 01       	movw	r12, r22
 1c2:	7c 01       	movw	r14, r24
	if (adc_value > PULSE_THRESHOLD && (currentTime - lastBeatTime > 200)) {  // 200 ms to avoid noise
 1c4:	c7 32       	cpi	r28, 0x27	; 39
 1c6:	d2 40       	sbci	r29, 0x02	; 2
 1c8:	e8 f1       	brcs	.+122    	; 0x244 <process_heartbeat+0x96>
 1ca:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lastBeatTime>
 1ce:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <lastBeatTime+0x1>
 1d2:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <lastBeatTime+0x2>
 1d6:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <lastBeatTime+0x3>
 1da:	a7 01       	movw	r20, r14
 1dc:	96 01       	movw	r18, r12
 1de:	28 1b       	sub	r18, r24
 1e0:	39 0b       	sbc	r19, r25
 1e2:	4a 0b       	sbc	r20, r26
 1e4:	5b 0b       	sbc	r21, r27
 1e6:	29 3c       	cpi	r18, 0xC9	; 201
 1e8:	31 05       	cpc	r19, r1
 1ea:	41 05       	cpc	r20, r1
 1ec:	51 05       	cpc	r21, r1
 1ee:	50 f1       	brcs	.+84     	; 0x244 <process_heartbeat+0x96>
		beatsPerMinute = 60000 / (currentTime - lastBeatTime);  // 60000 ms per minute
 1f0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lastBeatTime>
 1f4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <lastBeatTime+0x1>
 1f8:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <lastBeatTime+0x2>
 1fc:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <lastBeatTime+0x3>
 200:	a7 01       	movw	r20, r14
 202:	96 01       	movw	r18, r12
 204:	28 1b       	sub	r18, r24
 206:	39 0b       	sbc	r19, r25
 208:	4a 0b       	sbc	r20, r26
 20a:	5b 0b       	sbc	r21, r27
 20c:	60 e6       	ldi	r22, 0x60	; 96
 20e:	7a ee       	ldi	r23, 0xEA	; 234
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__udivmodsi4>
 218:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <beatsPerMinute+0x1>
 21c:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <beatsPerMinute>
		lastBeatTime = currentTime;
 220:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <lastBeatTime>
 224:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <lastBeatTime+0x1>
 228:	e0 92 0a 01 	sts	0x010A, r14	; 0x80010a <lastBeatTime+0x2>
 22c:	f0 92 0b 01 	sts	0x010B, r15	; 0x80010b <lastBeatTime+0x3>
		beatDetected = 1;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <beatDetected+0x1>
 238:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <beatDetected>
		PORTD |= (1 << LED_PIN);  // Turn on LED
 23c:	8b b1       	in	r24, 0x0b	; 11
 23e:	80 62       	ori	r24, 0x20	; 32
 240:	8b b9       	out	0x0b, r24	; 11
 242:	03 c0       	rjmp	.+6      	; 0x24a <process_heartbeat+0x9c>
		} else {
		PORTD &= ~(1 << LED_PIN);  // Turn off LED
 244:	8b b1       	in	r24, 0x0b	; 11
 246:	8f 7d       	andi	r24, 0xDF	; 223
 248:	8b b9       	out	0x0b, r24	; 11
	}
}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	ff 90       	pop	r15
 250:	ef 90       	pop	r14
 252:	df 90       	pop	r13
 254:	cf 90       	pop	r12
 256:	08 95       	ret

00000258 <main>:



int main(void)
{
	uart_init();
 258:	0e 94 93 00 	call	0x126	; 0x126 <uart_init>
	adc_init();
 25c:	0e 94 bb 00 	call	0x176	; 0x176 <adc_init>
	timer0_init(); // Initialize Timer0 for millis()
 260:	0e 94 a6 00 	call	0x14c	; 0x14c <timer0_init>
	DDRD |= (1 << LED_PIN); // set LED pin as output
 264:	8a b1       	in	r24, 0x0a	; 10
 266:	80 62       	ori	r24, 0x20	; 32
 268:	8a b9       	out	0x0a, r24	; 10

	 

	while(1) {
		uint16_t adc_value = adc_read(0); // read the value from ADC0
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 c2 00 	call	0x184	; 0x184 <adc_read>
		process_heartbeat(adc_value);
 270:	0e 94 d7 00 	call	0x1ae	; 0x1ae <process_heartbeat>
		if (beatDetected) {
 274:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <beatDetected>
 278:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <beatDetected+0x1>
 27c:	89 2b       	or	r24, r25
 27e:	21 f0       	breq	.+8      	; 0x288 <main+0x30>
			beatDetected = 0;
 280:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <beatDetected+0x1>
 284:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <beatDetected>
		}
		if (beatsPerMinute >= 72) {
 288:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <beatsPerMinute>
 28c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <beatsPerMinute+0x1>
 290:	88 34       	cpi	r24, 0x48	; 72
 292:	91 05       	cpc	r25, r1
 294:	84 f0       	brlt	.+32     	; 0x2b6 <main+0x5e>
			// Lies, send the lie signal to the slave
			uart_transmit('L');
 296:	8c e4       	ldi	r24, 0x4C	; 76
 298:	0e 94 9f 00 	call	0x13e	; 0x13e <uart_transmit>
			uart_transmit('\n');
 29c:	8a e0       	ldi	r24, 0x0A	; 10
 29e:	0e 94 9f 00 	call	0x13e	; 0x13e <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a2:	2f ef       	ldi	r18, 0xFF	; 255
 2a4:	81 ee       	ldi	r24, 0xE1	; 225
 2a6:	94 e0       	ldi	r25, 0x04	; 4
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0x50>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x5a>
 2b2:	00 00       	nop
 2b4:	0f c0       	rjmp	.+30     	; 0x2d4 <main+0x7c>
			_delay_ms(100); // Delay for 1 second
			 
		} else {
			// likely true, send truth signal to the slave
			uart_transmit('T');
 2b6:	84 e5       	ldi	r24, 0x54	; 84
 2b8:	0e 94 9f 00 	call	0x13e	; 0x13e <uart_transmit>
			uart_transmit('\n');
 2bc:	8a e0       	ldi	r24, 0x0A	; 10
 2be:	0e 94 9f 00 	call	0x13e	; 0x13e <uart_transmit>
 2c2:	2f ef       	ldi	r18, 0xFF	; 255
 2c4:	81 ee       	ldi	r24, 0xE1	; 225
 2c6:	94 e0       	ldi	r25, 0x04	; 4
 2c8:	21 50       	subi	r18, 0x01	; 1
 2ca:	80 40       	sbci	r24, 0x00	; 0
 2cc:	90 40       	sbci	r25, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <main+0x70>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <main+0x7a>
 2d2:	00 00       	nop
 2d4:	8f e3       	ldi	r24, 0x3F	; 63
 2d6:	9f e1       	ldi	r25, 0x1F	; 31
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <main+0x80>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x86>
 2de:	00 00       	nop
 2e0:	c4 cf       	rjmp	.-120    	; 0x26a <main+0x12>

000002e2 <__udivmodsi4>:
 2e2:	a1 e2       	ldi	r26, 0x21	; 33
 2e4:	1a 2e       	mov	r1, r26
 2e6:	aa 1b       	sub	r26, r26
 2e8:	bb 1b       	sub	r27, r27
 2ea:	fd 01       	movw	r30, r26
 2ec:	0d c0       	rjmp	.+26     	; 0x308 <__udivmodsi4_ep>

000002ee <__udivmodsi4_loop>:
 2ee:	aa 1f       	adc	r26, r26
 2f0:	bb 1f       	adc	r27, r27
 2f2:	ee 1f       	adc	r30, r30
 2f4:	ff 1f       	adc	r31, r31
 2f6:	a2 17       	cp	r26, r18
 2f8:	b3 07       	cpc	r27, r19
 2fa:	e4 07       	cpc	r30, r20
 2fc:	f5 07       	cpc	r31, r21
 2fe:	20 f0       	brcs	.+8      	; 0x308 <__udivmodsi4_ep>
 300:	a2 1b       	sub	r26, r18
 302:	b3 0b       	sbc	r27, r19
 304:	e4 0b       	sbc	r30, r20
 306:	f5 0b       	sbc	r31, r21

00000308 <__udivmodsi4_ep>:
 308:	66 1f       	adc	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	88 1f       	adc	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	1a 94       	dec	r1
 312:	69 f7       	brne	.-38     	; 0x2ee <__udivmodsi4_loop>
 314:	60 95       	com	r22
 316:	70 95       	com	r23
 318:	80 95       	com	r24
 31a:	90 95       	com	r25
 31c:	9b 01       	movw	r18, r22
 31e:	ac 01       	movw	r20, r24
 320:	bd 01       	movw	r22, r26
 322:	cf 01       	movw	r24, r30
 324:	08 95       	ret

00000326 <_exit>:
 326:	f8 94       	cli

00000328 <__stop_program>:
 328:	ff cf       	rjmp	.-2      	; 0x328 <__stop_program>
